#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
from bourne import *

#----------------------------------------------------------------------
# initiator cli functions
#----------------------------------------------------------------------

def initiator_create(args):
    bourne.connect(args.ip)
    task = bourne.initiator_create(args.host, args.protocol, args.port, args.node)
    if(BOURNE_DEBUG == '1'):
        print task

def initiator_delete(args):
    bourne.connect(args.ip)
    res = bourne.initiator_delete(args.name)
    print res

def initiator_show(args):
    bourne.connect(args.ip)
    initiator = bourne.initiator_show(args.name)
    print initiator

def initiator_query(args):
    bourne.connect(args.ip)
    print bourne.initiator_query(args.name)

def initiator_list(args):
    bourne.connect(args.ip)
    initiator_display_hdr()
    res = bourne.initiator_list(args.host)
    host = bourne.host_query(args.host)
    for r in res:
        initiator = bourne.api('GET', r['link']['href'], None)
        initiator_display(initiator)

def initiator_aliasget(args):
    bourne.connect(args.ip)
    systemuri  = bourne.storagedevice_query(args.ssname)
    res = bourne.initiator_aliasget(args.name, systemuri)
    print 'current initiator alias is', res['initiator_alias']

def initiator_aliasset(args):
    bourne.connect(args.ip)
    systemuri  = bourne.storagedevice_query(args.ssname)
    setresult = bourne.initiator_aliasset(args.name, systemuri, args.alias)
    getresult = bourne.initiator_aliasget(args.name, systemuri)
    print 'initiator alias is set to',getresult['initiator_alias']
    if (setresult['initiator_alias'] != getresult['initiator_alias']):
        print 'Initiator alias sanity failed'
    else:
        print 'Initiator alias sanity success'


#
# display initiator in list form
#
initiator_display_fmt = '{0:35s} {1:25s}  {2:6s} {3:65s} {4:s}'

def initiator_display_hdr():
    print initiator_display_fmt.format('portname', 'nodename', 'active', 'host', 'id')

def initiator_display(initiator):
    try:
        node = initiator['initiator_node']
    except:
        node = '---'
    print initiator_display_fmt.format(initiator['initiator_port'], node,'NO' if initiator['inactive'] else 'YES',
              initiator['host']['id'], initiator['id'])

# tag
def initiator_tag(args):
    bourne.connect(args.ip)
    if (args.id == None):
        args.id = bourne.initiator_query(args.name)
    print 'Tagging initiator', args.id
    bourne.tag(args.resource_type, args.id, args.tags)

# search
def initiator_search(args):
    bourne.connect(args.ip)
    if (args.scope != None):
        # query tenant id from tenant name
        args.scope = bourne.tenant_query(args.scope)
    array = bourne.search(args.resource_type, args.scope, args.prefix, args.project, args.tag)
    print 'Searching initiator with ' + args.prefix
    if (len(array) == 0):
        raise Exception('Failed to search with prefix ' + args.prefix)
    else:
        print 'Result: ', array

def initiator_register(args):
    bourne.connect(args.ip)
    res = bourne.initiator_register(args.name)
    print res

def initiator_deregister(args):
    bourne.connect(args.ip)
    res = bourne.initiator_deregister(args.name)
    print res

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------
try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# initiator <cmd> <cmd_args>
parser = argparse.ArgumentParser(description = 'Bourne initiator cli usage.')
parser.add_argument('cmd', help = 'cmd = (create | delete | show | list | register | deregister | aliasget | aliasset)')
parser.add_argument('--ip',	metavar = 'ipaddr',	help = 'IP address of bourne', default=bourne_ip)

# initiator create host protocol port node
create = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
create.add_argument('host',            help = 'host label or URI')
create.add_argument('protocol',        help = 'FC or ISCSI', default = None)
create.add_argument('port',            help = 'Port WWN or IQN, etc.', default = None)
create.add_argument('--node',          help = 'Node WWN or null', default = None)

# initiator delete name
delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
delete.add_argument('name',	help = 'name of initiator in the format host_name/initiator_port')

# initiator show name
show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
show.add_argument('name',	help = 'name of initiator in the format host_name/initiator_port')

# initiator query name
query = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
query.add_argument('name',	help = 'name of initiator in the format host_name/initiator_port')

# initiator list host
list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
list.add_argument('host',	help = 'host name', default = None)

# tag 
resource_type="initiator"
tag = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
tag.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
tag.add_argument('--id',     metavar = 'id',     help = 'resource id', default=None)
tag.add_argument('name',     metavar = 'name',   help = 'resource name')
tag.add_argument('tags',     metavar = 'tags',   help = 'tags', nargs='+', default=None)

# search
search = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
search.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
search.add_argument('--scope',   metavar = 'scope',  help = 'scope(global or tenant) for searching', default=None)
search.add_argument('prefix',    metavar = 'prefix', help = 'prefix for search name or tag')
search.add_argument('--tag',     metavar = 'tag',    help = 'boolean for search tag or not (search from name)', default=None)
search.add_argument('--project', metavar = 'project',help = 'search name within project', default=None)

# register
register = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
register.add_argument('name', help = 'name of initiator in the format host_name/initiator_port')

# deregister
deregister = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
deregister.add_argument('name', help = 'name of initiator in the format host_name/initiator_port')

# aliasget
aliasget = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
aliasget.add_argument('name', help = 'name of initiator in the format host_name/initiator_port')
aliasget.add_argument('ssname', help = 'name of the storage system')

# aliasset
aliasset = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
aliasset.add_argument('name', help = 'name of initiator in the format host_name/initiator_port')
aliasset.add_argument('ssname', help = 'name of the storage system')
aliasset.add_argument('alias', help = 'alias name')

#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:
    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if   (cmd == "create"):
        args = create.parse_args()
        initiator_create(args)
    elif (cmd == "delete"):
        args = delete.parse_args()
        initiator_delete(args)
    elif (cmd == "show"):
        args = show.parse_args()
        initiator_show(args)
    elif (cmd == "query"):
        args = query.parse_args()
        initiator_query(args)
    elif (cmd == "list"):
        args = list.parse_args()
        initiator_list(args)
    elif(cmd == "tag"):
        args = tag.parse_args()
        initiator_tag(args)
    elif (cmd == "search"):
        args = search.parse_args()
        initiator_search(args)
    elif(cmd == "register"):
        args = register.parse_args()
        initiator_register(args)
    elif(cmd == "deregister"):
        args = deregister.parse_args()
        initiator_deregister(args)
    elif(cmd == "aliasget"):
        args = aliasget.parse_args()
        initiator_aliasget(args)
    elif(cmd == "aliasset"):
        args = aliasset.parse_args()
        initiator_aliasset(args)

    else:
        parser.print_help()
except:
    raise
