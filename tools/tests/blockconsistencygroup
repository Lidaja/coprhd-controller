#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
import time
from string import Template
from bourne import *

URI_SERVICES_BASE               = ''
URI_BLOCK_CONSISTENCY_GROUP_BASE    = URI_SERVICES_BASE  + '/block/consistency-groups'
URI_BLOCK_CONSISTENCY_GROUP         = URI_BLOCK_CONSISTENCY_GROUP_BASE + '/{0}'
URI_BLOCK_CONSISTENCY_GROUP_DELETE  = URI_BLOCK_CONSISTENCY_GROUP + '/deactivate'

#----------------------------------------------------------------------
# consistency group cli functions
#----------------------------------------------------------------------

def consistency_group_create(args):
    bourne.connect(args.ip)
    project_uri = bourne.project_query(args.project)
    start = time.time()
    blockconsistencygroup = bourne.block_consistency_group_create(project_uri, args.label, args.arrayconsistency)
	
def consistency_group_update(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    s = bourne.block_consistency_group_update(group_uri, args.add, args.remove)
    print s
		
def consistency_group_delete(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.name)
    print "Deleting BlockConsistencyGroup " + str(group_uri)
    start = time.time()
    (o, s) = bourne.block_consistency_group_delete(group_uri, args.vipronly)
    total = time.time() - start
    if (s["state"] == 'ready'):
        print "BlockConsistencyGroup deleted successfully in", "{0:.2f}".format(total), "seconds"
    else:
        print 'BlockConsistencyGroup delete failed '
	bourne.pretty_print_json(s) 

def consistency_group_show(args):
    bourne.connect(args.ip)
    uri = bourne.block_consistency_group_query(args.name)
    group = bourne.block_consistency_group_show(uri)
    bourne.pretty_print_json(group)
    
def consistency_group_bulk(args):
    bourne.connect(args.ip)
    ids = bourne.block_consistency_group_bulkgetids()
    bourne.pretty_print_json(ids)
    bulk = bourne.block_consistency_group_bulkpost(ids)
    bourne.pretty_print_json(bulk)        
    
def consistency_group_check_volume(args):
    bourne.connect(args.ip)
    requested_volume_uri = bourne.volume_query(args.project + "/" + args.volume)
    project_uri = bourne.project_query(args.project)

    group_uri = bourne.block_consistency_group_query(args.name)
    
    print "Checking volume %s in consistency group %s. Expected? %s" % (requested_volume_uri, group_uri, args.expected)
    
    group = bourne.block_consistency_group_show(group_uri)
   
    print "Consistency Group: " + str(group)	
	 
    volumes = group["volumes"]
    
    print "Volumes in consistency group: " + str(volumes)
    
    present = False	
    
    for volume in volumes:
        volumeId = volume["id"]
        print "Volume %s is present in the group" % (volumeId)
        if volumeId == requested_volume_uri:
            present = True

    if present and not args.expected:
         raise Exception("Volume %s is still present in the consistency group" % (requested_volume_uri)); 
    if not present and args.expected:
         raise Exception("Volume %s is not present in the consistency group" % (requested_volume_uri));

def consistency_group_delete_with_volumes(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.name)
    expectedErrorMsg = "BlockConsistencyGroup " + group_uri + " has active references of type Volume"
    return bourne.api_check_error('POST', URI_BLOCK_CONSISTENCY_GROUP_DELETE.format(group_uri), 400, 1020, expectedErrorMsg)
        
def consistency_group_check_volume_create_error(args): 
    bourne.connect(args.ip)
    project_uri = bourne.project_query(args.project)
    cos_uri     = bourne.cos_query('block', args.cos)
    nh_uri      = bourne.neighborhood_query(args.neighborhood)
    cons_grp_uri = None
    cgProjectId = None
    
    
    if(args.consistencyGroup):
        cons_grp_uri = bourne.block_consistency_group_get_id_by_name(args.consistencyGroup)
     
    volumeCount = 1
    if (args.count):
        volumeCount = args.count
    
    expected_statuscode = 400        
    if (args.statuscode):
        expected_statuscode = int(args.statuscode)
   
    expected_servicecode = 1008         
    if (args.servicecode):
        expected_servicecode = int(args.servicecode)            
    eroorMessageTemplate = Template(args.error)
     
    if (args.consistencyGroupProject):
        cgProjectId =  bourne.project_query(args.consistencyGroupProject)

    expectedErrorMsg = eroorMessageTemplate.substitute(cgid=cons_grp_uri, cosid=cos_uri, projid=cgProjectId)
    parms = {
            'name'              : args.label,
            'varray'      : nh_uri,
            'project'           : project_uri,
            'vpool'               : cos_uri,
            'size'              : args.size,
            'count'             : volumeCount,
            'consistency_group' : cons_grp_uri
        }

    return bourne.api_check_error('POST', URI_VOLUME_LIST, expected_statuscode, expected_servicecode, expectedErrorMsg, parms)

def consistency_group_snapshot_create(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    print "Creating Consistency Group Snapshot " + str(args.name)
    start = time.time()
    (o, s) = bourne.block_consistency_group_snapshot_create(group_uri, args.name, args.createInactive)
    total = time.time() - start
    if (s["state"] == 'ready'):
        print "Consistency Group Snapshot created successfully in", "{0:.2f}".format(total), "seconds"
    else:
        print 'Consistency Group Snapshot creation failed '
    bourne.pretty_print_json(s) 

def consistency_group_swap(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    tgt_varray_uri = bourne.neighborhood_query(args.targetVarray)
    print "Swapping Consistency Group " + str(args.group) + " with target virtial array " + str(args.targetVarray)
    start = time.time()
    s = bourne.block_consistency_group_swap(group_uri, args.copyType, tgt_varray_uri)
    bourne.pretty_print_json(s) 
    
def consistency_group_failover(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    tgt_varray_uri = bourne.neighborhood_query(args.targetVarray)
    print "Failover Consistency Group " + str(args.group) + " with target virtial array " + str(args.targetVarray)
    if (args.pit):
        print "Failover Consistency Group " + str(args.group) + " to point-in-time " + str(args.pit)
    start = time.time()
    s = bourne.block_consistency_group_failover(group_uri, args.copyType, tgt_varray_uri, args.pit)
    bourne.pretty_print_json(s)         
   
def consistency_group_accessmode(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    tgt_varray_uri = bourne.neighborhood_query(args.targetVarray)
    print "Updating access mode for Consistency Group " + str(args.group) + " with target virtial array " + str(args.targetVarray)
    start = time.time()
    s = bourne.block_consistency_group_accessmode(group_uri, args.copyType, tgt_varray_uri, args.am)
    bourne.pretty_print_json(s)
 
def consistency_group_failover_cancel(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    tgt_varray_uri = bourne.neighborhood_query(args.targetVarray)
    print "Failover Consistency Group " + str(args.group) + " with target virtial array " + str(args.targetVarray)
    start = time.time()
    s = bourne.block_consistency_group_failover_cancel(group_uri, args.copyType, tgt_varray_uri)
    bourne.pretty_print_json(s)     
    
def consistency_group_snapshot_activate(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    snapshot_uri = bourne.block_consistency_group_snapshot_query(group_uri, args.name)
    print "Activating Consistency Group Snapshot " + str(args.name)
    start = time.time()
    (o, s) = bourne.block_consistency_group_snapshot_activate(group_uri, snapshot_uri)
    total = time.time() - start
    if (s["state"] == 'ready'):
        print "Consistency Group Snapshot activated successfully in", "{0:.2f}".format(total), "seconds"
    else:
        print 'Consistency Group Snapshot activation failed '
    bourne.pretty_print_json(s)

def consistency_group_snapshot_deactivate(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    snapshot_uri = bourne.block_consistency_group_snapshot_query(group_uri, args.name)
    print "Deactivating Consistency Group Snapshot " + str(args.name)
    start = time.time()
    tasks = bourne.block_consistency_group_snapshot_deactivate(group_uri, snapshot_uri)
    total = time.time() - start
    for task in tasks:
        name = task['resource']['name']
        id = task['resource']['id']
        s = task['state']
        if (s == 'ready'):
            print "Consistency Group Snapshot " + name + ' ' + id + " deactivated successfully in", "{0:.2f}".format(total), "seconds"
        else:
            print "Consistency Group Snapshot " + name + ' ' + id + " deactivation failed "
        bourne.pretty_print_json(task)   
 
def consistency_group_snapshot_restore(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    snapshot_uri = bourne.block_consistency_group_snapshot_query(group_uri, args.name)
    print "Restoring Consistency Group Snapshot " + str(args.name)
    start = time.time()
    (o, s) = bourne.block_consistency_group_snapshot_restore(group_uri, snapshot_uri)
    total = time.time() - start
    if (s["state"] == 'ready'):
        print "Consistency Group Snapshot restored successfully in", "{0:.2f}".format(total), "seconds"
    else:
        print 'Consistency Group Snapshot restore failed '
    bourne.pretty_print_json(s)         
             
def consistency_group_snapshot_show(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    snapshot_uri = bourne.block_consistency_group_snapshot_query(group_uri, args.name)
    snapshot = bourne.block_consistency_group_snapshot_show(group_uri, snapshot_uri)
    bourne.pretty_print_json(snapshot) 

def consistency_group_snapshot_list(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    uris = bourne.block_consistency_group_snapshot_list(group_uri)
    for uri in uris:
        snapshot = bourne.block_consistency_group_snapshot_show(group_uri, uri)
        bourne.pretty_print_json(snapshot)
		            
def consistency_group_snapshot_session_create(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    group = bourne.block_consistency_group_show(group_uri)
    start = time.time()
    (tasklist, state, message) = bourne.block_consistency_group_snapshot_session_create(group_uri, args.label, args.target_count, args.target_name, args.target_copymode)
    total = time.time() - start
    print "Create snapshot session for group " + group['name'] + ' ' + group['id'] + " completed in", "{0:.2f}".format(total), "seconds."
    if (state == 'ready'):
        for task in tasklist['task']:
           print "Snapshot session " + task['resource']['name'] + ' ' + task['resource']['id'] + " successfully created"

# Delete snapshot session.
def consistency_group_snapshot_session_delete(args):
    bourne.connect(args.ip)
    session_uri = bourne.block_consistency_group_snapshot_session_query(args.name)
    start = time.time()
    (tasklist, state, message) = bourne.block_snapshot_session_delete(session_uri, args.vipronly)
    total = time.time() - start
    print "Delete snapshot session completed in", "{0:.2f}".format(total), "seconds."
    if (state == 'ready'):
        for task in tasklist['task']:
            print "Snapshot session " + task['resource']['name'] + ' ' + task['resource']['id'] + " successfully deleted"
    else:
        print "Delete snapshot session failed with error " + message

def consistency_group_snapshot_session_list(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.group)
    uris = bourne.block_consistency_group_snapshot_session_list(group_uri)
    for uri in uris:
        session = bourne.block_consistency_group_snapshot_session_show(uri)
        bourne.pretty_print_json(session)

def consistency_group_snapshot_session_show(args):
    bourne.connect(args.ip)
    session_uri = bourne.block_consistency_group_snapshot_session_query(args.name)
    session = bourne.block_consistency_group_snapshot_session_show(session_uri)
    bourne.pretty_print_json(session) 

def consistency_group_snapshot_session_link_targets(args):
    bourne.connect(args.ip)
    session_uri = bourne.block_consistency_group_snapshot_session_query(args.name)
    start = time.time()
    (tasklist, state, message) = bourne.block_consistency_group_snapshot_session_link_targets(session_uri, args.target_count, args.target_name, args.target_copymode)
    total = time.time() - start
    print "Link targets to snapshot session completed in", "{0:.2f}".format(total), "seconds."
    if (state == 'ready'):
        for task in tasklist['task']:
            print "Target successfully linked to snapshot session " + task['resource']['name'] + ' ' + task['resource']['id']
    else:
        for task in tasklist['task']:
            print "Link target to snapshot session " + task['resource']['name'] + ' ' + task['resource']['id'] + " failed with error " + task['message']

# Unlink a target from a block snapshot session.
def consistency_group_snapshot_session_unlink_targets(args):
    bourne.connect(args.ip)
    (group_name, session_name) = args.name.rsplit('/', 1)
    group_uri = bourne.block_consistency_group_query(group_name)
    session_uri = bourne.block_consistency_group_snapshot_session_query(args.name)
    (group_name, snapshot_name) = args.target_name.rsplit('/', 1)
    target_uri = bourne.block_consistency_group_snapshot_query(group_uri, snapshot_name)
    target = bourne.block_snapshot_show(target_uri)
    start = time.time()
    task = bourne.block_snapshot_session_unlink_target(session_uri, target_uri, args.delete_target)
    total = time.time() - start
    print "Unlink target " + target['name'] + ' ' + target['id'] + " from snapshot session completed in", "{0:.2f}".format(total), "seconds."
    if (task['state'] == 'ready'):
        print "Target successfully unlinked from snapshot session " + task['resource']['name'] + ' ' + task['resource']['id']
    else:
        print "Unlink target from snapshot session " + task['resource']['name'] + ' ' + task['resource']['id'] + " failed with error " + task['message']

# Relink a target from a block snapshot session.
def consistency_group_snapshot_session_relink_targets(args):
    bourne.connect(args.ip)
    (group_name, session_name) = args.name.rsplit('/', 1)
    group_uri = bourne.block_consistency_group_query(group_name)
    session_uri = bourne.block_consistency_group_snapshot_session_query(args.name)
    (group_name, snapshot_name) = args.target_name.rsplit('/', 1)
    target_uri = bourne.block_consistency_group_snapshot_query(group_uri, snapshot_name)
    target = bourne.block_snapshot_show(target_uri)
    start = time.time()
    (tasklist, state, message) = bourne.block_snapshot_session_relink_target(session_uri, target_uri)
    if (state == 'ready'):
        for task in tasklist['task']:
            print "Target successfully relinked from snapshot session " + task['resource']['name'] + ' ' + task['resource']['id']
    else:
        for task in tasklist['task']:
            print "Relink target from snapshot session " + task['resource']['name'] + ' ' + task['resource']['id'] + " failed with error " + task['message']

# Restore a target from a block snapshot session.
def consistency_group_snapshot_session_restore_targets(args):
    bourne.connect(args.ip)
    session_uri = bourne.block_consistency_group_snapshot_session_query(args.name)
    start = time.time()
    task = bourne.block_snapshot_session_restore(session_uri)
    total = time.time() - start
    print "Restore snapshot completed in", "{0:.2f}".format(total), "seconds."
    if (task['state'] == 'ready'):
        print "Snapshot session " + task['resource']['name'] + ' ' + task['resource']['id'] + " successfully restored"
    else:
        print "Restore snapshot session " + task['resource']['name'] + ' ' + task['resource']['id'] + " failed with error " + task['message']

# List volume IDs part of the consistency group
def list_volume_ids(args):
    bourne.connect(args.ip)
    group_uri = bourne.block_consistency_group_query(args.name)
    group = bourne.block_consistency_group_show(group_uri)
    volumes = group["volumes"]
    for volume in volumes:
        print(volume["id"])

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# consistency group cmd cmd_args [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne blockconsistencygroups cli usage.')
parser.add_argument('cmd', help = 'cmd = (create | show | delete | check_volume | delete_with_volumes | check_volume_error | swap | accessmode | failover | failover-cancel)')
parser.add_argument('--ip',    metavar = 'ipaddr',    help = 'IP address of bourne', default=bourne_ip)

# consistency group create fsuri [--ip ipaddr]
create = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
create.add_argument('project', help = 'name of the project to use in blockconsistencygroup')
create.add_argument('label', help = 'label/name for blockconsistencygroup')
create.add_argument('--noarrayconsistency', dest='arrayconsistency',action='store_false')

# consistency group show   uri [--ip ipaddr]
show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
show.add_argument('name', help = 'name of blockconsistencygroup')

# consistency group bulk [--ip ipaddr]
bulk = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')

# consistency group update parser
update = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
update.add_argument('group', help = 'name of consistency group')
update.add_argument('--add', dest='add')
update.add_argument('--remove', dest='remove')

# consistency group delete   uri [--ip ipaddr]
delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
delete.add_argument('name', help = 'name of blockconsistencygroup')
delete.add_argument('--vipronly', action='store_true', help = 'Delete only from ViPR')

checkVolume = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
checkVolume.add_argument('project', help = 'name of the project to use in blockconsistencygroup')
checkVolume.add_argument("volume", help = "Volume to check")
checkVolume.add_argument('name', help = 'name of blockconsistencygroup')
checkVolume.add_argument('--expected', dest='expected',action='store_true')
checkVolume.add_argument('--no-expected', dest='expected',action='store_false')
checkVolume.set_defaults(expected=True)

# error handling
checkVolumeCreateError = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
checkVolumeCreateError.add_argument('label',        help = 'label of volume')
checkVolumeCreateError.add_argument('project',        help = 'container project name')
checkVolumeCreateError.add_argument('neighborhood',    help = 'neighborhood where volume is created')
checkVolumeCreateError.add_argument('cos',        help = 'cos name for volume')
checkVolumeCreateError.add_argument('size',        help = 'size of volume')
checkVolumeCreateError.add_argument('error',        help = 'expected error message')
checkVolumeCreateError.add_argument('--count',        help = 'Number of volumes to create')
checkVolumeCreateError.add_argument('--consistencyGroup', help = 'add the volume to the specified consistency group for snapshot operations')
checkVolumeCreateError.add_argument('--consistencyGroupProject', help = 'Consistency group project')
checkVolumeCreateError.add_argument('--statuscode', help = 'expected status code')
checkVolumeCreateError.add_argument('--servicecode', help = 'expected servcie code')

# consistency group snapshot arguments parser
snapshotOperation = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
snapshotOperation.add_argument('group', help = 'name of consistency group')
snapshotOperation.add_argument('name', help = 'name for new consistency group snapshot')
snapshotOperation.add_argument('--createInactive', dest='createInactive',action='store_true')
snapshotOperation.set_defaults(createInactive=False)

# consistency group access mode arguments parser
accessModeOperation = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
accessModeOperation.add_argument('group', help = 'name of consistency group')
accessModeOperation.add_argument('--copyType', help = 'copy type (rp or srdf)')
accessModeOperation.add_argument('--targetVarray', help = 'name of target virtual array')
accessModeOperation.add_argument('--am', help = 'access mode of the target copy')

# consistency group arguments parser
protectionOperation = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
protectionOperation.add_argument('group', help = 'name of consistency group')
protectionOperation.add_argument('--copyType', help = 'copy type (rp or srdf)')
protectionOperation.add_argument('--targetVarray', help = 'name of target virtual array')
protectionOperation.add_argument('--pit', help = 'any UTC point-in-time formatted as yyyy-MM-dd_HH:mm:ss or datetime in milliseconds')

# consistency group snapshot session arguments parser
snapshotSessionOperation = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
snapshotSessionOperation.add_argument('group', help = 'name of consistency group')

# consistency group snapshot session arguments parser
snapshotSessionShow = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
snapshotSessionShow.add_argument('name', help = 'The name of the snapshot session as group_name/session_name.')

# consistency group snapshot session create group label [--ip ipaddr]
snapshotSessionCreate = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
snapshotSessionCreate.add_argument('group', help = 'The name of the snapshot session source consistency group as project/name.')
snapshotSessionCreate.add_argument('label', help = 'The name for the new snapshot session.')
snapshotSessionCreate.add_argument('--target_count', help = 'The number of targets to create and link to the snapshot session.')
snapshotSessionCreate.add_argument('--target_name', help = 'The base name for newly created targets.')
snapshotSessionCreate.add_argument('--target_copymode', help = 'The copy mode for newly created targets, copy or nocopy, default=nocopy.')

# consistency group delete name [--ip ipaddr]
snapshotSessionDelete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
snapshotSessionDelete.add_argument('name', help = 'The name of the snapshot session as group_name/session_name.')
snapshotSessionDelete.add_argument('--vipronly', action='store_true', help = 'Delete only from ViPR')

# consistency group link_targets name [--ip ipaddr]
snapshotSessionLinkTargets = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
snapshotSessionLinkTargets.add_argument('name', help = 'The name of the snapshot session as group_name/session_name.')
snapshotSessionLinkTargets.add_argument('target_count', help = 'The number of targets to create and link to the snapshot session.')
snapshotSessionLinkTargets.add_argument('target_name', help = 'The base name for the newly created targets.')
snapshotSessionLinkTargets.add_argument('--target_copymode', help = 'The copy mode for newly created targets, copy or nocopy, default=nocopy.')

# consistency group unlink_target name [--ip ipaddr]
snapshotSessionUnlinkTargets = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
snapshotSessionUnlinkTargets.add_argument('name', help = 'The name of the snapshot session for which the target is unlinked from group_name/session_name.')
snapshotSessionUnlinkTargets.add_argument('target_name', help = 'The name of the linked target to be unlinked from the snapshot session as group_name/snapshot_name.')
snapshotSessionUnlinkTargets.add_argument('--delete_target', help = 'If true, the target volume is deleted, default=false')

# consistency group relink_target name [--ip ipaddr]
snapshotSessionRelinkTargets = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
snapshotSessionRelinkTargets.add_argument('name', help = 'The name of the snapshot session to which the target is relinked as group_name/session_name.')
snapshotSessionRelinkTargets.add_argument('target_name', help = 'The name of the linked target to be relinked to the snapshot session as as group_name/snapshot_name.')

# consistency group restore name [--ip ipaddr]
snapshotSessionRestoreTargets = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
snapshotSessionRestoreTargets.add_argument('name', help = 'The name of the snapshot session as group_name/session_name.')

# list_volume_ids name
listVolumeIds = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
listVolumeIds.add_argument('name', help = 'The name of the consistency group.')

#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:

    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if (cmd == "create"):
        args = create.parse_args()
        consistency_group_create(args)
    elif (cmd == "delete"):
        args = delete.parse_args()
        consistency_group_delete(args)
    elif (cmd == "show"):
        args = show.parse_args()
        consistency_group_show(args)
    elif (cmd == "bulk"):
        args = bulk.parse_args()
        consistency_group_bulk(args)    
    elif (cmd == "check_volume"):
        args = checkVolume.parse_args()
        consistency_group_check_volume(args)
    elif (cmd == "delete_with_volumes"):
        args = delete.parse_args()
        consistency_group_delete_with_volumes(args)
    elif (cmd == "check_volume_error"):
        args = checkVolumeCreateError.parse_args()
        consistency_group_check_volume_create_error(args)  
    elif (cmd == "create_snapshot"):
        args = snapshotOperation.parse_args()
        consistency_group_snapshot_create(args)  
    elif (cmd == "activate_snapshot"):
        args = snapshotOperation.parse_args()
        consistency_group_snapshot_activate(args)
    elif (cmd == "deactivate_snapshot"):
        args = snapshotOperation.parse_args()
        consistency_group_snapshot_deactivate(args)
    elif (cmd == "restore_snapshot"):
        args = snapshotOperation.parse_args()
        consistency_group_snapshot_restore(args)
    elif (cmd == "show_snapshot"):
        args = snapshotOperation.parse_args()
        consistency_group_snapshot_show(args)
    elif (cmd == "list_snapshots"):
        args = snapshotOperation.parse_args()
        consistency_group_snapshot_list(args)
    elif (cmd == "update"):
        args = update.parse_args()
        consistency_group_update(args)	
    elif (cmd == "swap"):
        args = protectionOperation.parse_args()
        consistency_group_swap(args)
    elif (cmd == "accessmode"):
        args = accessModeOperation.parse_args()
        consistency_group_accessmode(args)
    elif (cmd == "failover"):
        args = protectionOperation.parse_args()
        consistency_group_failover(args)
    elif (cmd == "failover_cancel"):
        args = protectionOperation.parse_args()
        consistency_group_failover_cancel(args)    	
    elif (cmd == "create_snapshot_session"):
        args = snapshotSessionCreate.parse_args()
        consistency_group_snapshot_session_create(args)
    elif (cmd == "delete_snapshot_session"):
        args = snapshotSessionDelete.parse_args()
        consistency_group_snapshot_session_delete(args)
    elif (cmd == "list_snapshot_sessions"):
        args = snapshotSessionOperation.parse_args()
        consistency_group_snapshot_session_list(args)
    elif (cmd == "show_snapshot_session"):
        args = snapshotSessionShow.parse_args()
        consistency_group_snapshot_session_show(args)
    elif (cmd == "link_targets"):
        args = snapshotSessionLinkTargets.parse_args()
        consistency_group_snapshot_session_link_targets(args)
    elif (cmd == "unlink_targets"):
        args = snapshotSessionUnlinkTargets.parse_args()
        consistency_group_snapshot_session_unlink_targets(args)
    elif (cmd == "relink_targets"):
        args = snapshotSessionRelinkTargets.parse_args()
        consistency_group_snapshot_session_relink_targets(args)
    elif (cmd == "restore_targets"):
        args = snapshotSessionRestoreTargets.parse_args()
        consistency_group_snapshot_session_restore_targets(args)
    elif (cmd == "list_volume_ids"):
        args = listVolumeIds.parse_args()
        list_volume_ids(args)
    else:
        parser.print_help()

except:
    raise

