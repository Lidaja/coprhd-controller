#!/etc/genconfig
#
# Copyright (c) 2016 EMC Corporation
# All Rights Reserved
#
# This software contains the intellectual property of EMC Corporation
# or is licensed to EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of EMC.

_gen_syslog_config_log4j() {
    local svcLogPath='/opt/storageos/conf/'
    declare -a appServices=('apisvc' 'authsvc' 'bkutils' 'controllersvc' 'coordinatorsvc' 'dbsvc' 'geodbsvc' 'geosvc' 'portalsvc' 'sasvc' 'syssvc' 'vasasvc');
    local syslogKey="SYSLOG"
    for svc in "${appServices[@]}"
        do
        svclogFile="${svcLogPath}${svc}-log4j.properties"
        sysEnabled=$(grep "$syslogKey" "$svclogFile")
        # skipped as enabled syslog before
        if [ $? == 0 ];then
            return
        fi
        # Get the RootLogger line
        if [ "$svc" == "vasasvc" ]; then
            rootKey="log4j.rootCategory"
        elif [ "$svc" == "bkutils" ]; then
            rootKey="log4j.logger.com.emc.storageos="
        else
            rootKey="log4j.rootLogger"
        fi

        rootLogger=$(grep "$rootKey"  "$svclogFile" |awk -F "=" '{print $2}')
        logLevel=$(echo ${rootLogger} |awk -F "," '{print $1}')

        #replace rootlogger
        sed -i "s/$rootLogger/$rootLogger,SYSLOG/" ${svclogFile}

        cat << EOF >> ${svclogFile}
# The SYSLOG appender to be configured for the syslog configuration to affect
log4j.appender.SYSLOG=org.apache.log4j.net.SyslogAppender
log4j.appender.SYSLOG.Threshold=DEBUG
log4j.appender.SYSLOG.SyslogHost=localhost
log4j.appender.SYSLOG.Facility=local2
log4j.appender.SYSLOG.Header=true
log4j.appender.SYSLOG.layout=org.apache.log4j.PatternLayout
log4j.appender.SYSLOG.layout.ConversionPattern=vipr $(hostname) ${svc} %d{ISO8601} %-5p %c{1}:%L - %m%n

log4j.appender.AUDITSYSLOG=org.apache.log4j.net.SyslogAppender
log4j.appender.AUDITSYSLOG.Threshold=${logLevel}
log4j.appender.AUDITSYSLOG.SyslogHost=localhost
log4j.appender.AUDITSYSLOG.Facility=local2
log4j.appender.AUDITSYSLOG.Header=true
log4j.appender.AUDITSYSLOG.layout=org.apache.log4j.PatternLayout
log4j.appender.AUDITSYSLOG.layout.ConversionPattern=vipr $(hostname) AuditLog %d{ISO8601} %-5p %c{1}:%L - %m%n
log4j.logger.AuditLog=${logLevel},AUDITSYSLOG
log4j.additivity.AuditLog=false
EOF
        done
}

_gen_syslog_config_rsyslog() {
    syslogConf="/etc/rsyslog.conf"
    remote_conf='/etc/rsyslog.d/remote.conf'
    local syslog_remote_servers_ports=${_GENCONFIG_network_syslog_remote_servers_ports}
    local syslog_transport_protocol=${_GENCONFIG_system_syslog_transport_protocol}
    cat << 'EOF' > ${syslogConf}
$ModLoad imudp          # Module to support UDP remote messages inbound
$UDPServerAddress *     # Listen to any/all inbound IP addresses (note that the * is default, specifying to make config clear)
$UDPServerRun 514       # Listen on port 514

$ModLoad immark.so     # provides --MARK-- message capability (every 1 hour)
$MarkMessagePeriod     3600

$ModLoad imuxsock.so   # provides support for local system logging (e.g. via logger command)
                       # reduce dupplicate log messages (last message repeated n times)
$RepeatedMsgReduction on

$ModLoad imklog.so     # kernel logging (may be also provided by /sbin/klogd),
                       # see also http://www.rsyslog.com/doc-imklog.html.
$klogConsoleLogLevel 1 # set log level 1 (same as in /etc/sysconfig/syslog).

# Define template for vipr logs (messages, auth):
$template vipr_log_format,"%TIMESTAMP:1:4:date-mysql%-%TIMESTAMP:5:6:date-mysql%-%TIMESTAMP:7:8:date-mysql% %TIMESTAMP:8:15:% [%syslogfacility-text%] %syslogseverity-text% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"

# Define template for vipr alert logs (systemevents):
$template vipr_alerts_log_format,"%TIMESTAMP:1:4:date-mysql%-%TIMESTAMP:5:6:date-mysql%-%TIMESTAMP:7:8:date-mysql% %TIMESTAMP:8:15:% [%syslogfacility-text%] %syslogseverity-text% ALERTS: %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"

# Use traditional log format by default.
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# Include config generated by /etc/init.d/syslog script
# using the SYSLOGD_ADDITIONAL_SOCKET* variables in the
# /etc/sysconfig/syslog file.
$IncludeConfig /var/run/rsyslog/additional-log-sockets.conf

# Include config files, that the admin provided? :
$IncludeConfig /etc/rsyslog.d/*.conf

# print most important on tty10 and on the xconsole pipe
if ( \
        /* kernel up to warning except of firewall  */ \
        ($syslogfacility-text == 'kern')      and      \
        ($syslogseverity <= 4 /* warning */ ) and not  \
        ($msg contains 'IN=' and $msg contains 'OUT=') \
    ) or ( \
        /* up to errors except of facility authpriv */ \
        ($syslogseverity <= 3 /* errors  */ ) and not  \
        ($syslogfacility-text == 'authpriv')           \
    ) \
then  /dev/tty10
& |/dev/xconsole

# Emergency messages to everyone logged on (wall)
*.emerg  :omusrmsg:*

# Added for "local7" logging (All warn and more urgent go to file)
local7.warn /var/log/messages;vipr_log_format

# cron messages to dedicated cron log (STIG GEN003160)
$FileCreateMode 0600
cron.* -/var/log/cron

# firewall messages into separate file and stop their further processing
if             ($syslogfacility-text == 'kern') and \
                ($msg contains 'IN=' and $msg contains 'OUT=') \
then      -/var/log/firewall
& ~

# acpid messages into separate file and stop their further processing
if             ($programname == 'acpid' or $syslogtag == '[acpid]:') and \
                ($syslogseverity <= 5 /* notice */) \
then      -/var/log/acpid
& ~

# NetworkManager into separate file and stop their further processing
if      ($programname == 'NetworkManager') or \
                ($programname startswith 'nm-') \
then      -/var/log/NetworkManager
& ~

# email-messages (log and stop further processing)
mail.*  -/var/log/mail
& ~

# news-messages (log and stop further processing)
news.* ~

# Warnings in one file (except iptables logged above)
*.=warning;*.=err  -/var/log/warn
*.crit              /var/log/warn

# All messages except iptables and the facilities news and mail logged above
$FileOwner root
$FileGroup root
# Allow syssvc, running as user storageos, to read /var/log/messages.
# - This also gives all other users access to /var/log/messages.
# - While this should not be a problem, since we do not have any interactive users besides root and svcuser.
# Adding a selective ACL for the user storageos would be better.
# - Unfortunately neither rsyslog nor logrotate support ACLs out of the box.
$FileCreateMode 0644
*.*;mail.none   -/var/log/messages;vipr_log_format
$FileOwner root
$FileGroup root
$FileCreateMode 0644

# Some foreign boot scripts require local7
local0,local1.*  -/var/log/localmessages
local2,local3.*  -/var/log/localmessages
local4,local5.*  -/var/log/localmessages
local6,local7.*  -/var/log/localmessages

# Log file for Bourne node AUTH facility - all messages from auth facility
$FileOwner root
$FileGroup storageos
$FileCreateMode 0640
auth.* /var/log/auth;vipr_log_format

#Alerts use local7 - will capture warn or more severe
local7.warn /var/log/systemevents;vipr_alerts_log_format

# webstorage; anything that contains the string "[ws_native]" written to the /opt/storageos/logs/blobsvc_native.log, then messages are discarded
$FileOwner root
$FileGroup root
$FileCreateMode 0644
:msg, contains, "[ws_native]" /opt/storageos/logs/blobsvc_native.log
& ~

# storageserver destination: Anything that contains "storageserver" is logged and then discarded
$FileOwner storageos
$FileGroup storageos
$FileCreateMode 0664
:msg, contains, "storageserver" /var/log/storageserver.log
& ~

EOF
[ -z ${syslog_remote_servers_ports} ] && return
if [ "$syslog_enable" == "True" ]; then
    if [ "${syslog_transport_protocol}" == "UDP" ];then
        proto="@"
    else
        proto="@@"
    fi
    # delete the ip port line generated last time
    sed -i '/^*.*/d' ${remote_conf}
    sed -i '/^\$/d' ${remote_conf}
    if [ "${syslog_transport_protocol}" != "TLS" ];then
    # Forward the messages to the remote syslog servers through UDP or TCP
        for server_port in $(echo ${syslog_remote_servers_ports} |sed 's/,/ /g')
        do
            cat << EOF >>${syslogConf}
*.* ${proto}${server_port}
EOF
        done
    else
        _gen_syslog_server_ca
        _gen_syslog_config_encrypt
    fi
fi
cat << EOF >>${syslogConf}

## END of file
EOF
}

_gen_syslog_config_encrypt() {
    encrypt_enabled=$(grep "^\$DefaultNetstreamDriverCAFile" $remote_conf)
    if [ $? != 0 ];then
        cat << 'EOF' >>${remote_conf}
$DefaultNetstreamDriverCAFile /opt/storageos/conf/syslog-server.crt
$DefaultNetstreamDriverCertFile /opt/storageos/conf/storageos.crt
$DefaultNetstreamDriverKeyFile  /opt/storageos/conf/storageos.key

$DefaultNetstreamDriver gtls # use gtls netstream driver
$ActionSendStreamDriverMode 1 # require TLS for the connection
$ActionSendStreamDriverAuthMode x509/certvalid # server is NOT authenticated
EOF
    fi
    for server_port in $(echo ${syslog_remote_servers_ports} |sed 's/,/ /g')
    do
        cat << EOF >>${remote_conf}
*.* @@(o)${server_port}
EOF
    done
}

_gen_syslog_server_ca() {
    cert_file='/opt/storageos/conf/syslog-server.crt'
    cert=$(echo ${_GENCONFIG_system_syslog_driver_ca} |sed 's/,/\n/g')
    cat << EOF >${cert_file}
$cert
EOF
    chmod 0400 ${cert_file}
}

syslog_enable=${_GENCONFIG_system_syslog_enable}
if [ "$syslog_enable" == "True" ];
    then
    _gen_syslog_config_log4j
fi
    _gen_syslog_config_rsyslog
